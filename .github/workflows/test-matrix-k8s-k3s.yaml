name: test-matrix-k8s-versions
on:
  workflow_dispatch:
    inputs:
      image-repo:
        description: "The registry for the image"
        default: "ghcr.io"
        type: "string"
      image-path:
        description: "The path for the image (no registry, no tag)"
        default: "cloudzero/cloudzero-agent/cloudzero-agent"
        type: "string"
      image-tag:
        description: "The image tag"
        default: "latest"
        type: "string"
  workflow_call:
    inputs:
      image-repo:
        description: "The registry for the image"
        default: "ghcr.io"
        type: "string"
      image-path:
        description: "The path for the image (no registry, no tag)"
        default: "cloudzero/cloudzero-agent/cloudzero-agent"
        type: "string"
      image-tag:
        description: "The image tag"
        default: "latest"
        type: "string"
    outputs:
      version-test-status:
        description: "The completion status of the k3s-version-test job"
        value: ${{ jobs.k3s-version-test.outputs.version-test-status }}

concurrency:
  # This concurrency group ensures that only one job in the group runs at a time.
  # If a new job is triggered, the previous one will be canceled.
  group: matrix-kver-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  k3s-version-test:
    name: ${{ matrix.kver.platform }}-k3s-test-${{ matrix.kver.k3s }}
    runs-on: ${{ matrix.kver.platform == 'linux/amd64' && 'ubuntu-latest' || matrix.kver.platform == 'linux/arm64' && 'ubuntu-24.04-arm' }}
    # These should match the permissions in the calling job.
    permissions:
      contents: read
      packages: read
    outputs:
      version-test-status: ${{ job.status }}
    strategy:
      fail-fast: false
      matrix:
        # Useful for finding the current k3s versions: https://eduardominguez.es/k3s-versions/
        # From: https://github.com/e-minguez/k3s-versions
        #
        # NOTE: We also switch up the platforms, just to try and catch any image build issues early.
        kver:
          [
            { k8s: v1.21.14, k3s: v1.21.14+k3s1, platform: linux/amd64 },
            { k8s: v1.22.17, k3s: v1.22.17+k3s1, platform: linux/arm64 },
            { k8s: v1.23.17, k3s: v1.23.17+k3s1, platform: linux/amd64 },
            { k8s: v1.24.17, k3s: v1.24.17+k3s1, platform: linux/arm64 },
            { k8s: v1.25.16, k3s: v1.25.16+k3s4, platform: linux/amd64 },
            { k8s: v1.26.15, k3s: v1.26.15+k3s1, platform: linux/arm64 },
            { k8s: v1.27.16, k3s: v1.27.16+k3s1, platform: linux/amd64 },
            { k8s: v1.28.14, k3s: v1.28.14+k3s1, platform: linux/arm64 },
            { k8s: v1.29.15, k3s: v1.29.15+k3s1, platform: linux/amd64 },
            { k8s: v1.30.11, k3s: v1.30.11+k3s1, platform: linux/arm64 },
            { k8s: v1.31.7, k3s: v1.31.7+k3s1, platform: linux/amd64 },
            { k8s: v1.32.3, k3s: v1.32.3+k3s1, platform: linux/arm64 },
          ]

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - uses: azure/setup-kubectl@v4
        with:
          version: ${{ matrix.kver.k8s }}

      - name: Install Krew and Plugins
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 4
          command: |
            (
              set -x; cd "$(mktemp -d)" &&
              OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
              ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
              KREW="krew-${OS}_${ARCH}" &&
              curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
              tar zxvf "${KREW}.tar.gz" &&
              ./"${KREW}" install krew
            )
            echo "$HOME/.krew/bin" >> "$GITHUB_PATH"
            export PATH="$HOME/.krew/bin:$PATH"
            kubectl krew install stern

      - name: Install Dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 4
          command: |
            make install-tools

      - name: Install yq
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 4
          command: |
            sudo snap install yq --channel=v4/stable

      - name: Setup k3s ${{ matrix.kver.k3s }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 4
          command: |
            echo "Ensure UFW is disabled"
            sudo ufw disable
            echo "Setup k3s ${{ matrix.kver.k3s }}"
            curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="${{ matrix.kver.k3s }}" INSTALL_K3S_CHANNEL="stable" sh -s -

      - name: Prepare a kubeconfig in ~/.kube/config
        run: |
          echo "Prepare a kubeconfig in ~/.kube/config"
          mkdir -p ~/.kube
          sudo cat /etc/rancher/k3s/k3s.yaml > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Wait for cluster to be ready
        run: |
          echo "Waiting for nodes to be ready..."
          sleep 60s
          kubectl wait --for=condition=Ready nodes --all --timeout=4m
          kubectl get nodes -o wide
          echo "Wait for deployment/coredns"
          kubectl rollout status --watch --timeout=4m deployment/coredns -n kube-system
          echo "Wait for deployment/metrics-server"
          kubectl rollout status --watch --timeout=4m deployment/metrics-server -n kube-system

      - name: Set version output
        id: set-output
        run: |
          echo "kubeconfig=$HOME/.kube/config" >> $GITHUB_OUTPUT
          echo "k8s-version=$(k3s --version | grep --max-count=1 'k3s' | sed 's/.*\(v[0-9][^ ]*\).*/\1/')" >> $GITHUB_OUTPUT
          echo "kubectl-version=$(kubectl version --client | grep Client | cut -d ' ' -f 3)" >> $GITHUB_OUTPUT
          echo "helm-version=$(helm version --short | sed 's/\([^+]*\).*/\1/')" >> $GITHUB_OUTPUT

      # Install TestKube into Cluster
      - name: Install TestKube
        run: |
          echo "Applying TestKube Helm Chart"
          .tools/bin/helm repo add kubeshop https://kubeshop.github.io/helm-charts
          .tools/bin/helm install testkube kubeshop/testkube \
            --version=v2.1.137 \
            -n testkube --create-namespace
          echo "Wait for testkube deployments"
          kubectl wait deployment \
            -n testkube \
            --all \
            --for condition=Available=True \
            --timeout=600s

      # Install Testkube CLI
      - uses: kubeshop/setup-testkube@v1
        with:
          namespace: testkube
          version: 2.1.137

      - name: Setup imagePullSecrets
        run: |
          kubectl create ns cz-agent
          kubectl create secret \
            docker-registry \
            ghcr-registry \
            -n cz-agent \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}

      - name: Install CZ Agent
        run: |
          echo "Applying CloudZero Agent Helm Chart"
          .tools/bin/helm repo add prom https://prometheus-community.github.io/helm-charts
          .tools/bin/helm dependency build ./helm
          export CLUSTERNAME="$(hostname)-$(date '+%Y%m%d%H%M%S')"
          echo $CLUSTERNAME
          make \
            CLOUD_HELM_EXTRA_ARGS="--set 'imagePullSecrets[0].name=ghcr-registry' --set insightsController.server.replicaCount=1 --set components.agent.image.repository=${{ inputs.image-repo }}/${{ inputs.image-path }} --set components.agent.image.tag=${{ inputs.image-tag }} --set components.aggregator.replicas=1" \
            CLOUDZERO_DEV_API_KEY="${{ secrets.CLOUDZERO_DEV_API_KEY }}" \
            CLUSTER_NAME="${CLUSTERNAME}" \
            helm-install
          echo "Wait for cz-agent deployments"
          kubectl wait deployment \
            -n cz-agent \
            --all \
            --for condition=Available=True \
            --timeout=600s

      - name: Validate All Resources Created Successfully
        run: |
          # Check that all Jobs completed successfully
          kubectl wait --for=condition=Complete job -n cz-agent --all --timeout=300s

          # Check that all pods are either Running or Completed
          timeout 300s bash -c 'while true; do all_ready=true; for pod in $(kubectl get pods -n cz-agent --no-headers -o custom-columns=":metadata.name" 2>/dev/null || true); do if [ -z "$pod" ]; then continue; fi; phase=$(kubectl get pod "$pod" -n cz-agent -o jsonpath="{.status.phase}" 2>/dev/null || echo "Unknown"); if [[ "$phase" != "Running" && "$phase" != "Succeeded" ]]; then all_ready=false; echo "Pod $pod is not ready (phase: $phase)"; break; fi; done; if [[ "$all_ready" == "true" ]] && [[ -n "$(kubectl get pods -n cz-agent --no-headers 2>/dev/null)" ]]; then echo "âœ… All pods are either Running or Completed"; exit 0; fi; sleep 2; done'

          # Check that all Deployments are available
          echo "Checking deployment status..."
          kubectl get deployments -n cz-agent -o json | jq -r '.items[] | select(.status.readyReplicas != .spec.replicas) | .metadata.name' > /tmp/unready_deployments
          if [ -s /tmp/unready_deployments ]; then
            echo "Found deployments not fully ready:"
            cat /tmp/unready_deployments
            false
          else
            echo "All deployments are ready"
          fi

      - name: Apply and Run TestKube Tests
        run: |
          kubectl apply -f ./tests/testkube/tests.yaml
          testkube run testworkflow agent-basic-test -f

      # Many more testkube based tests could be added in here as desired.
      # Testkube support Postman, K6, simple scripts and much more.

      - name: Collect Logs
        id: logs
        if: failure()
        continue-on-error: true
        run: |
          rm -f ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          touch ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          echo "---Kubectl Get All-----------------------------------------------------" &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          kubectl get all -A &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log || echo "[ERROR] Kubectl get all command exited error." &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          echo "---Kubectl Events------------------------------------------------------" &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          kubectl events -A &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log || echo "[ERROR] Kubectl events command exited error." &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          echo "---Stern Logs (testkube)------------------------------------------------" &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          kubectl stern -n testkube --since=3m --no-follow -t . | sort -k4 &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log || echo "[ERROR] Stern log command exited error." &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          echo "---Stern Logs (cz-agent)------------------------------------------------" &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          kubectl stern -n cz-agent --since=3m --no-follow -t . | sort -k4 &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log || echo "[ERROR] Stern log command exited error." &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          echo "---Testkube Logs--------------------------------------------------------" &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          testkube get testworkflowexecution $(testkube get testworkflowexecution --limit 1 -o yaml | yq e .[0].id) &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log || echo "[ERROR] Testkube log command exited error." &>> ${{ runner.temp }}/${{ matrix.kver.k3s }}.log

      # It wouldn't be a bad idea to do a security pattern scan of these logs and redact them if a
      # potential secret it detected, since they will be publicly available if uploaded.

      - name: Upload Failure Logs
        uses: actions/upload-artifact@v4
        if: always() && steps.logs.conclusion == 'success'
        with:
          name: ${{ matrix.kver.k3s }}.log
          path: ${{ runner.temp }}/${{ matrix.kver.k3s }}.log
          retention-days: 1
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: |
          sudo systemctl stop k3s
          /usr/local/bin/k3s-uninstall.sh || true
