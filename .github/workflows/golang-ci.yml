name: CI

on: [push]

jobs:
  custom-checks: # Assorted custom checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run custom checks
        run: ./scripts/ci-checks.sh

  # Run linters
  #
  # The primary linter we use here is golangci-lint, which is a linter framework
  # for Go which allows you to run a large number of linters to check for
  # specific issues.
  #
  # Note that we intentionally do not use the golangci-lint GitHub Action here
  # since there is a good chance it will get out of sync with the version used
  # in the Makefile. By using the version in the Makefile we make it easy to
  # make sure all developers are using the same version, and therefore finding
  # the same issues.
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install golangci-lint
        run: make install-tools-golangci-lint
      - name: Run linters
        run: make lint

  analyze: # Run static analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install tools
        run: make install-tools
      - name: Run static analysis
        run: make analyze

  # Run govulncheck
  #
  # govulncheck checks for known vulnerabilities in Go dependencies. Typically
  # it would make sense to run this in a separate pipeline, perhaps on a cron
  # job, because if it fails it will potentially "break" the CI builds for
  # issues unrelated to the commit in question. However, since govulncheck has
  # an extremely low rate of false positives (it checks if the vulnerable code
  # is actually used, as opposed to there just being a vulnerability somewhere
  # in the dependency), I think it is appropriate to force us to fix issues it
  # finds ASAP.
  govulncheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-file: go.mod

  format: # Format code and data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install tools
        run: make install-tools
      - name: Format code
        run: make format
      - name: Check file format
        run: git diff --exit-code --color

  tidy: # Run go mod tidy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run go mod tidy
        run: go mod tidy
      - name: Check for differences
        run: git diff --exit-code --color

  generate: # Generate code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.3"
      - name: Install tools
        run: make install-tools
      - name: Generate code
        run: make generate
      - name: Check file format
        run: git diff --exit-code --color

  validate-dependabot: # Validate Dependabot configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: marocchino/validate-dependabot@v3

  test: # Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install dependencies
        run: |
          go mod download
      - name: Run go tests
        run: make test

  integration-tests:
    runs-on: ubuntu-latest

    # references local file ".secrets"
    env:
      CLOUDZERO_DEV_API_KEY: ${{ secrets.CLOUDZERO_DEV_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install dependencies
        run: go mod tidy

        # TODO: Currently the only real integration test is TestRemoteWrite.
        # There's an issue with some of the other Tests running in a Linux container,
        # so the command only runs the single test for now.
      - name: Run integration tests
        run: make test-integration

  smoke-tests:
    runs-on: ubuntu-latest

    # references local file ".secrets"
    env:
      CLOUDZERO_DEV_API_KEY: ${{ secrets.CLOUDZERO_DEV_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install dependencies
        run: go mod tidy

      # smoke tests hit alfa.
      - name: Run smoke tests
        run: sudo -E make test-smoke
