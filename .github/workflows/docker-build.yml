name: DockerBuild
on:
  push:
    branches:
      - develop
      - main
    tags:
      - "*"
  # tag is pr-<number>
  pull_request:
  release:
    types:
      - created
      - published
      - released

env:
  REGISTRY_PROD_ADDR: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/cloudzero-agent
  UNTESTED_IMAGE_NAME: "Cloudzero/untested-cloudzero/untested-cloudzero-agent"

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-repo: ${{ env.REGISTRY_PROD_ADDR }}
      image-path: ${{ env.UNTESTED_IMAGE_NAME }}
      image-tag: ${{ steps.meta.outputs.version }}
    steps:
      # Checkout the repository code
      - name: SETUP - Checkout
        id: checkout_code
        uses: actions/checkout@v4

      - # Install buildx for multi-platform builds
        name: SETUP - Docker Buildx
        id: install_buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          driver-opts: network=host

      - name: Get raw repo name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          export REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}

      # Format the image names for OCI compliance (all lowercase)
      - name: INPUT PREP - image name formatting
        id: image_name
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          echo "UNTESTED_IMAGE_NAME=${UNTESTED_IMAGE_NAME,,}" >>${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      # Extract metadata (tags, labels) the docker image build
      - name: INPUT PREP - Extract Docker metadata from git repository
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        env:
          VALIDATOR_IMAGE_DESCRIPTION: "CloudZero Agent Validator"
        with:
          # ONLY use the untested registry address for the image until it is tested
          images: ${{ env.REGISTRY_PROD_ADDR }}/${{ env.UNTESTED_IMAGE_NAME }}
          # Tag generation rules:
          # 1. branch name (used for develop or main)
          # 2. PR number (used for PRs)
          # 3. version to match the semver pattern for the chart
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
          labels: |
            maintainer=CloudZero
            org.opencontainers.image.description=${{ env.VALIDATOR_IMAGE_DESCRIPTION }}
            org.opencontainers.image.vendor=CloudZero
            image.name=${{ env.REGISTRY_PROD_ADDR }}/${{ env.IMAGE_NAME }}
          # https://github.com/docker/metadata-action?tab=readme-ov-file#latest-tag
          # should only occur when a semver or raw when we are on master
          flavor: |
            latest=false

      - name: INPUT PREP - Set build time revision
        run: |
          REVISION=$(git rev-parse --short HEAD)
          TAG=$(echo "${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}")
          BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "REVISION=${REVISION}" >>${GITHUB_ENV}
          echo "TAG=${TAG}" >>${GITHUB_ENV}
          echo "BUILD_TIME=${BUILD_TIME}" >>${GITHUB_ENV}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: TEST - Build image
        id: build_image
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        env:
          PLATFORMS: "linux/amd64,linux/arm64"
          VALIDATOR_DOCKERFILE: docker/Dockerfile
          VALIDATOR_CONTEXT: .
        with:
          push: true
          context: ${{ env.VALIDATOR_CONTEXT }}
          file: ${{ env.VALIDATOR_DOCKERFILE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.PLATFORMS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TIME=${{ env.BUILD_TIME }}
            REVISION=${{ env.REVISION }}
            TAG=${{ env.TAG }}

      - name: SECURITY - Grype Docker Image Scan
        uses: anchore/scan-action@v6
        with:
          image: ${{ env.REGISTRY_PROD_ADDR }}/${{ env.UNTESTED_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          fail-build: true
          severity-cutoff: high

      - name: SECURITY - Trivy Docker Image Scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ env.REGISTRY_PROD_ADDR }}/${{ env.UNTESTED_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Cleanup older dev images
        uses: dataaxiom/ghcr-cleanup-action@v1
        continue-on-error: true
        with:
          older-than: 2 weeks
          repository: cloudzero-agent
          package: "untested-cloudzero/untested-cloudzero-agent"

  k8s-version-matrix-tests:
    # These should match the permissions in the called workflow.
    permissions:
      contents: read
      packages: read
    needs: ["docker-build"]
    uses: ./.github/workflows/test-matrix-k8s-k3s.yaml
    with:
      image-repo: ${{ needs.docker-build.outputs.image-repo }}
      image-path: ${{ needs.docker-build.outputs.image-path }}
      image-tag: ${{ needs.docker-build.outputs.image-tag }}
    secrets: inherit

  test-status-reporting:
    runs-on: ubuntu-latest
    permissions:
      statuses: write
    needs: ["k8s-version-matrix-tests"]
    if: ${{ always() }}
    steps:
      - uses: ouzi-dev/commit-status-updater@v2
        if: ${{ needs.k8s-version-matrix-tests.outputs.version-test-status == 'success' }}
        with:
          name: "k8s-version-matrix-tests"
          status: "success"
      - uses: ouzi-dev/commit-status-updater@v2
        if: ${{ needs.k8s-version-matrix-tests.outputs.version-test-status != 'success' }}
        with:
          name: "k8s-version-matrix-tests"
          status: "failure"

  ###########################################################################
  # PRODUCTION ONLY STEPS BEYOND THIS POINT
  #
  release-image:
    needs: ["docker-build", "k8s-version-matrix-tests"]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      # Format the image names for OCI compliance (all lowercase)
      - name: INPUT PREP - image name formatting
        id: image_name
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          echo "UNTESTED_IMAGE_NAME=${UNTESTED_IMAGE_NAME,,}" >>${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      # install regctl for registry management operations
      - name: PRODUCTION STEP - Install Regctl for registry management
        if: github.event_name == 'release' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: install_regctl
        uses: iarekylew00t/regctl-installer@v3

      # Login to the production registry
      - name: PRODUCTION STEP - login to container registry
        if: github.event_name == 'release' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: prod_registry_login
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            regctl registry login ${{ env.REGISTRY_PROD_ADDR }} \
              --user "${{ github.actor }}" \
              --pass-stdin

      # Promote the untested image to production
      # only allow on main, develop branches, or a version tag
      - name: PRODUCTION STEP - Publish Image to Production
        if: github.event_name == 'release' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        id: prod_publish_image
        run: |
          regctl image copy \
            ${{ env.REGISTRY_PROD_ADDR }}/${{ env.UNTESTED_IMAGE_NAME }}:${{ needs.docker-build.outputs.image-tag }} \
            ${{ env.REGISTRY_PROD_ADDR }}/${{ env.IMAGE_NAME }}:${{ needs.docker-build.outputs.image-tag }}

          if [[ ${{ needs.docker-build.outputs.image-tag }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            regctl image copy \
              ${{ env.REGISTRY_PROD_ADDR }}/${{ env.UNTESTED_IMAGE_NAME }}:${{ needs.docker-build.outputs.image-tag }} \
              ${{ env.REGISTRY_PROD_ADDR }}/${{ env.IMAGE_NAME }}:latest
          fi
