name: Manual Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release."
        required: true

jobs:
  release-to-main:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.VERSION_BUMP_DEPLOY_KEY }}
          persist-credentials: true
          fetch-depth: 0 # fetch the whole repo history

      - name: Verify changelog exists
        run: |
          MINOR_VERSION=$(echo "${{ github.event.inputs.version }}" | cut -d. -f1,2)
          test -f "docs/releases/CHANGELOG-${MINOR_VERSION}.md"

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install tools
        run: make install-tools

      - name: Update image version in Helm chart
        run: |
          sed -ri "s/^( *[a-z]*): +[^ ]+  (# <- Software release corresponding to this chart version.)$/\1: ${{ github.event.inputs.version }}  \2/" helm/values.yaml helm/templates/_helpers.tpl
          make helm-generate-tests format app/functions/helmless/default-values.yaml
          git add helm/values.yaml helm/templates/*.tpl tests/helm/template/*.yaml app/functions/helmless/default-values.yaml
          git commit -m "Update image version in Helm chart to ${{ github.event.inputs.version }}"

      - name: Checkout main branch
        run: git checkout main

      - name: Merge develop into main
        run: git merge --ff-only develop

      - name: Tag release
        run: git tag -a "v${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"

      - name: Push changes to main
        run: git push --atomic origin develop main "v${{ github.event.inputs.version }}"

      - name: Extract release notes from changelog
        run: |
          MINOR_VERSION=$(echo "${{ github.event.inputs.version }}" | cut -d. -f1,2)
          CHANGELOG_FILE="docs/releases/CHANGELOG-${MINOR_VERSION}.md"

          # Extract version-specific content from changelog
          awk '
          /^## .*'"${{ github.event.inputs.version }}"'/ { found=1; next }
          /^## / && found { exit }
          found { print }
          ' "$CHANGELOG_FILE" > release_notes.md

          # If no version-specific section found, use the latest changes
          if [ ! -s release_notes.md ]; then
            echo "No specific section found for ${{ github.event.inputs.version }}, using latest changes from changelog"
            awk '
            /^## / { if (first_section) exit; first_section=1; next }
            first_section { print }
            ' "$CHANGELOG_FILE" > release_notes.md
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ github.event.inputs.version }}
          body_path: release_notes.md
          prerelease: ${{ contains(github.event.inputs.version, '-beta-') || contains(github.event.inputs.version, '-rc-') }}
          draft: true
