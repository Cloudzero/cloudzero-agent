name: Manual Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false
        default: ''

jobs:
  release-to-main:
    environment: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Fetch all branches
        run: git fetch --all

      - name: Checkout develop branch
        run: git checkout develop

      - name: Rebase develop branch
        run: git pull --rebase origin develop

      - name: Checkout main branch
        run: git checkout main

      - name: Rebase main branch
        run: git pull --rebase origin main

      - name: Merge develop into main
        run: git merge --ff-only develop

      - name: Push changes to main
        run: git push origin main

      - name: Determine Release Version
        id: determine_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "VERSION_PROVIDED=true" >> $GITHUB_ENV
          else
            LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
            # Remove the v prefix if present
            if [[ "$LAST_TAG" == v* ]]; then
              LAST_TAG=${LAST_TAG:1}
            fi
            echo "LAST_TAG=${LAST_TAG}" >> $GITHUB_ENV
            echo "RELEASE_VERSION=${LAST_TAG}" >> $GITHUB_ENV
            echo "VERSION_PROVIDED=false" >> $GITHUB_ENV
          fi

      - name: RELEASE - Create new version
        id: version
        if: env.VERSION_PROVIDED != 'true'
        uses: anothrNick/github-tag-action@1.71.0
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            WITH_V: true
            PRERELEASE: true
            INITIAL_VERSION: ${{ env.LAST_TAG }}

      - name: Set Final Release Version
        id: final_version
        run: |
          if [ "${{ env.VERSION_PROVIDED }}" == "true" ]; then
            echo "final_tag=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "final_tag=${{ steps.version.outputs.new_tag }}" >> $GITHUB_ENV
          fi

      - name: Validate Release Notes are Present
        run: |
          if [ ! -f "docs/releases/${{ env.final_tag }}.md" ]; then
            echo "Release notes for ${{ env.final_tag }} are missing. Please create a release notes file at docs/releases/${{ env.final_tag }}.md"
            exit 1
          fi

      - name: RELEASE - Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.final_tag }}
          release_name: Release ${{ env.final_tag }}
          body_path: ${{ github.workspace }}/docs/releases/${{ env.final_tag }}.md
          draft: false
          prerelease: ${{ env.VERSION_PROVIDED == 'true' }}
