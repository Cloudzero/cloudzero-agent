// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/storage.go
//
// Generated by this command:
//
//	mockgen -source=pkg/types/storage.go -destination=pkg/types/mocks/storage_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	types "github.com/cloudzero/cloudzero-insights-controller/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseWriter is a mock of DatabaseWriter interface.
type MockDatabaseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseWriterMockRecorder
	isgomock struct{}
}

// MockDatabaseWriterMockRecorder is the mock recorder for MockDatabaseWriter.
type MockDatabaseWriterMockRecorder struct {
	mock *MockDatabaseWriter
}

// NewMockDatabaseWriter creates a new mock instance.
func NewMockDatabaseWriter(ctrl *gomock.Controller) *MockDatabaseWriter {
	mock := &MockDatabaseWriter{ctrl: ctrl}
	mock.recorder = &MockDatabaseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseWriter) EXPECT() *MockDatabaseWriterMockRecorder {
	return m.recorder
}

// PurgeStaleData mocks base method.
func (m *MockDatabaseWriter) PurgeStaleData(rt time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeStaleData", rt)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeStaleData indicates an expected call of PurgeStaleData.
func (mr *MockDatabaseWriterMockRecorder) PurgeStaleData(rt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeStaleData", reflect.TypeOf((*MockDatabaseWriter)(nil).PurgeStaleData), rt)
}

// UpdateSentAtForRecords mocks base method.
func (m *MockDatabaseWriter) UpdateSentAtForRecords(data []types.ResourceTags, ct time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSentAtForRecords", data, ct)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSentAtForRecords indicates an expected call of UpdateSentAtForRecords.
func (mr *MockDatabaseWriterMockRecorder) UpdateSentAtForRecords(data, ct any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSentAtForRecords", reflect.TypeOf((*MockDatabaseWriter)(nil).UpdateSentAtForRecords), data, ct)
}

// WriteData mocks base method.
func (m *MockDatabaseWriter) WriteData(data types.ResourceTags, isCreate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", data, isCreate)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteData indicates an expected call of WriteData.
func (mr *MockDatabaseWriterMockRecorder) WriteData(data, isCreate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockDatabaseWriter)(nil).WriteData), data, isCreate)
}

// MockDatabaseReader is a mock of DatabaseReader interface.
type MockDatabaseReader struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseReaderMockRecorder
	isgomock struct{}
}

// MockDatabaseReaderMockRecorder is the mock recorder for MockDatabaseReader.
type MockDatabaseReaderMockRecorder struct {
	mock *MockDatabaseReader
}

// NewMockDatabaseReader creates a new mock instance.
func NewMockDatabaseReader(ctrl *gomock.Controller) *MockDatabaseReader {
	mock := &MockDatabaseReader{ctrl: ctrl}
	mock.recorder = &MockDatabaseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseReader) EXPECT() *MockDatabaseReaderMockRecorder {
	return m.recorder
}

// ReadData mocks base method.
func (m *MockDatabaseReader) ReadData(arg0 time.Time) ([]types.ResourceTags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadData", arg0)
	ret0, _ := ret[0].([]types.ResourceTags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadData indicates an expected call of ReadData.
func (mr *MockDatabaseReaderMockRecorder) ReadData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadData", reflect.TypeOf((*MockDatabaseReader)(nil).ReadData), arg0)
}
