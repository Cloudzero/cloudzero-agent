aggregator:
  affinity: {}
  cloudzero:
    rotateInterval: 30m
    sendInterval: 1m
    sendTimeout: 30s
  collector:
    port: 8080
    resources:
      limits:
        cpu: 2000m
        memory: 1024Mi
      requests:
        cpu: 100m
        memory: 64Mi
  database:
    compressionLevel: 8
    emptyDir:
      enabled: true
      sizeLimit: ""
    maxInterval: 10m
    maxRecords: 1500000
    purgeRules:
      lazy: true
      metricsOlderThan: 2160h
      percent: 20
  image:
    digest: null
    pullPolicy: null
    repository: null
    tag: null
  logging:
    level: info
  mountRoot: /cloudzero
  nodeSelector: {}
  profiling: false
  replicas: 1
  shipper:
    port: 8081
    resources:
      limits:
        cpu: 2000m
        memory: 1024Mi
      requests:
        cpu: 100m
        memory: 64Mi
  tolerations: []
apiKey: null
cloudAccountId: "975482786146"
clusterName: aws-cirrus-jb-cluster
commonMetaLabels:
  joe.io/component: cloudzero-agent
  joe.io/feature: telemetry
  joe.io/team: cirrus
  joe.io/version: 1.1.0-rc-1
components:
  agent:
    image:
      pullPolicy: Always
      repository: ghcr.io/cloudzero/cloudzero-agent/cloudzero-agent
      tag: dev-d9d4bc43da14f500b3cdbb245ae3bffd1907bb60
  kubectl:
    image:
      repository: docker.io/bitnami/kubectl
      tag: 1.32.0
  prometheus:
    image:
      repository: quay.io/prometheus/prometheus
      tag: null
  prometheusReloader:
    image:
      repository: quay.io/prometheus-operator/prometheus-config-reloader
      tag: v0.70.0
configmapReload:
  env: []
  prometheus:
    containerSecurityContext: {}
    enabled: true
    image:
      digest: null
      pullPolicy: null
      repository: null
      tag: null
    resources: {}
  reloadUrl: ""
defaults:
  affinity: {}
  annotations: {}
  dns:
    config: {}
    policy: null
  image:
    pullPolicy: IfNotPresent
    pullSecrets: null
  labels: {}
  nodeSelector: {}
  priorityClassName: null
  tolerations: []
endpoint: /v1/container-metrics
existingSecretName: existing-dev-api-key
host: dev-api.cloudzero.com
imagePullSecrets: []
initBackfillJob:
  annotations: {}
  enabled: true
  image:
    digest: null
    pullPolicy: null
    repository: null
    tag: null
  tolerations: []
initCertJob:
  annotations: {}
  enabled: true
  image:
    digest: null
    pullPolicy: null
    repository: null
    tag: null
  rbac:
    clusterRoleBindingName: ""
    clusterRoleName: ""
    create: true
    serviceAccountName: ""
  tolerations: []
insightsController:
  annotations:
    enabled: true
    patterns:
    - .*
    resources:
      cronjobs: true
      daemonsets: true
      deployments: true
      jobs: true
      namespaces: true
      nodes: true
      pods: true
      statefulsets: true
  enabled: true
  labels:
    enabled: true
    patterns:
    - .*
    resources:
      cronjobs: true
      daemonsets: true
      deployments: true
      jobs: true
      namespaces: true
      nodes: true
      pods: true
      statefulsets: true
  podAnnotations: {}
  podLabels: {}
  resources: {}
  server:
    affinity: {}
    deploymentAnnotations: {}
    healthCheck:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 15
      path: /healthz
      periodSeconds: 20
      port: 8443
      successThreshold: 1
      timeoutSeconds: 3
    idle_timeout: 120s
    image:
      pullPolicy: null
      repository: null
      tag: null
    logging:
      level: info
    name: webhook-server
    nodeSelector: {}
    podAnnotations: {}
    port: 8443
    read_timeout: 10s
    replicaCount: 3
    send_interval: 1m
    send_timeout: 1m
    tolerations: []
    write_timeout: 10s
  service:
    port: 443
  tls:
    caBundle: ""
    crt: ""
    enabled: true
    key: ""
    mountPath: /etc/certs
    secret:
      create: true
      name: ""
    useCertManager: false
  volumeMounts: []
  volumes: []
  webhooks:
    annotations: {}
    namespaceSelector: {}
    path: /validate
kubeStateMetrics:
  enabled: true
  image:
    digest: null
    registry: registry.k8s.io
    repository: kube-state-metrics/kube-state-metrics
    tag: v2.10.1
  nameOverride: cloudzero-state-metrics
  prometheusScrape: false
  service:
    port: 8080
prometheusConfig:
  configMapAnnotations: {}
  configMapNameOverride: ""
  configOverride: ""
  globalScrapeInterval: 60s
  scrapeJobs:
    additionalScrapeJobs: []
    aggregator:
      enabled: true
      scrapeInterval: 120s
    cadvisor:
      enabled: true
      scrapeInterval: 60s
    kubeStateMetrics:
      enabled: true
      scrapeInterval: 60s
    prometheus:
      enabled: true
      scrapeInterval: 120s
rbac:
  create: true
region: us-east-2
scheme: https
secretAnnotations: {}
server:
  affinity: {}
  agentMode: true
  args:
  - --config.file=/etc/config/prometheus/configmaps/prometheus.yml
  - --web.enable-lifecycle
  - --web.console.libraries=/etc/prometheus/console_libraries
  - --web.console.templates=/etc/prometheus/consoles
  deploymentAnnotations: {}
  emptyDir:
    sizeLimit: 8Gi
  image:
    digest: null
    pullPolicy: null
    repository: null
    tag: null
  name: server
  nodeSelector: {}
  persistentVolume:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: false
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    storageClass: ""
    subPath: ""
  podAnnotations: {}
  resources:
    limits:
      memory: 1024Mi
    requests:
      cpu: 250m
      memory: 512Mi
  tolerations: []
serverConfig:
  containerSecretFileName: value
  containerSecretFilePath: /etc/config/secrets/
serviceAccount:
  annotations: {}
  create: true
  name: ""
validator:
  image:
    digest: null
    pullPolicy: null
    pullSecrets: null
    repository: null
    tag: null
  name: env-validator
  serviceEndpoints:
    kubeStateMetrics: null
