// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudzero/cloudzero-agent/app/domain/certificate (interfaces: KubernetesClient)
//
// Generated by this command:
//
//	mockgen -destination=app/domain/certificate/mocks/kubernetes_client_mock.go -package=mocks github.com/cloudzero/cloudzero-agent/app/domain/certificate KubernetesClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	certificate "github.com/cloudzero/cloudzero-agent/app/domain/certificate"
	gomock "go.uber.org/mock/gomock"
)

// MockKubernetesClient is a mock of KubernetesClient interface.
type MockKubernetesClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClientMockRecorder
	isgomock struct{}
}

// MockKubernetesClientMockRecorder is the mock recorder for MockKubernetesClient.
type MockKubernetesClientMockRecorder struct {
	mock *MockKubernetesClient
}

// NewMockKubernetesClient creates a new mock instance.
func NewMockKubernetesClient(ctrl *gomock.Controller) *MockKubernetesClient {
	mock := &MockKubernetesClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClient) EXPECT() *MockKubernetesClientMockRecorder {
	return m.recorder
}

// GetTLSSecret mocks base method.
func (m *MockKubernetesClient) GetTLSSecret(ctx context.Context, namespace, secretName string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSSecret", ctx, namespace, secretName)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTLSSecret indicates an expected call of GetTLSSecret.
func (mr *MockKubernetesClientMockRecorder) GetTLSSecret(ctx, namespace, secretName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSSecret", reflect.TypeOf((*MockKubernetesClient)(nil).GetTLSSecret), ctx, namespace, secretName)
}

// GetWebhookCABundle mocks base method.
func (m *MockKubernetesClient) GetWebhookCABundle(ctx context.Context, webhookName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookCABundle", ctx, webhookName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookCABundle indicates an expected call of GetWebhookCABundle.
func (mr *MockKubernetesClientMockRecorder) GetWebhookCABundle(ctx, webhookName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookCABundle", reflect.TypeOf((*MockKubernetesClient)(nil).GetWebhookCABundle), ctx, webhookName)
}

// PatchSecret mocks base method.
func (m *MockKubernetesClient) PatchSecret(ctx context.Context, namespace, secretName string, patchData map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchSecret", ctx, namespace, secretName, patchData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecret indicates an expected call of PatchSecret.
func (mr *MockKubernetesClientMockRecorder) PatchSecret(ctx, namespace, secretName, patchData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecret", reflect.TypeOf((*MockKubernetesClient)(nil).PatchSecret), ctx, namespace, secretName, patchData)
}

// PatchWebhookConfiguration mocks base method.
func (m *MockKubernetesClient) PatchWebhookConfiguration(ctx context.Context, webhookName string, patches []certificate.WebhookPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchWebhookConfiguration", ctx, webhookName, patches)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchWebhookConfiguration indicates an expected call of PatchWebhookConfiguration.
func (mr *MockKubernetesClientMockRecorder) PatchWebhookConfiguration(ctx, webhookName, patches any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchWebhookConfiguration", reflect.TypeOf((*MockKubernetesClient)(nil).PatchWebhookConfiguration), ctx, webhookName, patches)
}
