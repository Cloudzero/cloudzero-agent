// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudzero/cloudzero-agent/app/utils/scout/types (interfaces: Scout)
//
// Generated by this command:
//
//	mockgen -destination=mocks/scout_mock.go -package=mocks . Scout
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/cloudzero/cloudzero-agent/app/utils/scout/types"
	gomock "go.uber.org/mock/gomock"
)

// MockScout is a mock of Scout interface.
type MockScout struct {
	ctrl     *gomock.Controller
	recorder *MockScoutMockRecorder
	isgomock struct{}
}

// MockScoutMockRecorder is the mock recorder for MockScout.
type MockScoutMockRecorder struct {
	mock *MockScout
}

// NewMockScout creates a new mock instance.
func NewMockScout(ctrl *gomock.Controller) *MockScout {
	mock := &MockScout{ctrl: ctrl}
	mock.recorder = &MockScoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScout) EXPECT() *MockScoutMockRecorder {
	return m.recorder
}

// Detect mocks base method.
func (m *MockScout) Detect(ctx context.Context) (types.CloudProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detect", ctx)
	ret0, _ := ret[0].(types.CloudProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Detect indicates an expected call of Detect.
func (mr *MockScoutMockRecorder) Detect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detect", reflect.TypeOf((*MockScout)(nil).Detect), ctx)
}

// EnvironmentInfo mocks base method.
func (m *MockScout) EnvironmentInfo(ctx context.Context) (*types.EnvironmentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnvironmentInfo", ctx)
	ret0, _ := ret[0].(*types.EnvironmentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnvironmentInfo indicates an expected call of EnvironmentInfo.
func (mr *MockScoutMockRecorder) EnvironmentInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnvironmentInfo", reflect.TypeOf((*MockScout)(nil).EnvironmentInfo), ctx)
}
