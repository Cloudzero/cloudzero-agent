// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudzero/cloudzero-agent/app/types (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=app/types/mocks/storage_mock.go -package=mocks github.com/cloudzero/cloudzero-agent/app/types Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage[Model any, ID comparable] struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder[Model, ID]
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder[Model any, ID comparable] struct {
	mock *MockStorage[Model, ID]
}

// NewMockStorage creates a new mock instance.
func NewMockStorage[Model any, ID comparable](ctrl *gomock.Controller) *MockStorage[Model, ID] {
	mock := &MockStorage[Model, ID]{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder[Model, ID]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage[Model, ID]) EXPECT() *MockStorageMockRecorder[Model, ID] {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage[Model, ID]) Create(ctx context.Context, it *Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, it)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder[Model, ID]) Create(ctx, it any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage[Model, ID])(nil).Create), ctx, it)
}

// Delete mocks base method.
func (m *MockStorage[Model, ID]) Delete(ctx context.Context, id ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder[Model, ID]) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage[Model, ID])(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockStorage[Model, ID]) Get(ctx context.Context, id ID) (*Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder[Model, ID]) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage[Model, ID])(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockStorage[Model, ID]) Update(ctx context.Context, it *Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, it)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder[Model, ID]) Update(ctx, it any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage[Model, ID])(nil).Update), ctx, it)
}
